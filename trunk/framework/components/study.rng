<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    ===========================================================================
    Copyright 2009 College of American Pathologists (CAP)
    
    This file is part of the "CAP Schemas for Synoptic Cancer Reports".
    
    The "CAP Schema for Synoptic Cancer Reports" is licensed under the Apache 
    License, Version 2.0 (the "License"); you may not use this file except in 
    compliance with the License.
    
    You may obtain a copy of the License at:
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software 
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    
    See the License for the specific language governing permissions and
    limitations under the License.
    ===========================================================================

-->
<!DOCTYPE grammar [
<!ENTITY response "response.rng">
]>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
   ns="http://www.cap.org/pert/2009/01/"
   xmlns="http://relaxng.org/ns/structure/1.0"
   xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
   xmlns:ecc="http://www.cap.org/pert/2009/01/">
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <a:documentation>This file defines the standard leaf structure for an
      observation. It is used by multiple files in the project. The stucture,
      simplified, is as follows:</a:documentation>
   <a:documentation>value {result, specify?, label?, comment?}</a:documentation>
   <a:documentation>where: "{}" designates containment and "?" designates
      optionality.</a:documentation>
   <a:documentation>The "value" element, accordingly, serves a a container for
      the required "result" element, which encloses</a:documentation>
   <a:documentation>(1) the result string, that must in turn conform to an
      enumerated or otherwise constrained datatype;</a:documentation>
   <a:documentation>(2) the optional "specify" element, which is available to
      enclose a user-specified value when the constraints of the prescribed
      enumeration or datatype constraint must be overridden;</a:documentation>
   <a:documentation>(3) </a:documentation>
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <define name="study">
      <interleave>
         <ref name="study.content"/>
         <parentRef name="common.attrib"/>
         <ref name="study.attrib"/>
      </interleave>
   </define>
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <define name="study.content">
      <empty/>
   </define>
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <define combine="interleave" name="study.text.content">
      <interleave>
         <grammar>
            <include href="&response;">
               <define name="response.attrib">
                  <ref name="text-response.attrib"/>
               </define>
               <define name="response.text-value.valueset">
                  <parentRef name="studies.study.response.value.valueset"/>
               </define>
            </include>
         </grammar>
         <optional>
            <element name="method">
               <interleave>
                  <ref name="method.content"></ref>
                  <ref name="common.content"/>
               </interleave>
               <ref name="studies.study.method.attrib"/>
            </element>
         </optional>
         <ref name="common.specify"/>
      </interleave>
   </define>
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <define combine="choice" name="study.attrib">
      <empty/>
   </define>
   <define name="method.content">
      <grammar>
         <include href="&response;">
            <define name="response.attrib">
               <ref name="text-response.attrib"/>
            </define>
            <define name="response.text-value.valueset">
               <parentRef
                  name="studies.study.method.response.value.valueset"
               />
            </define>
         </include>
      </grammar>
   </define>
   <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
</grammar>
